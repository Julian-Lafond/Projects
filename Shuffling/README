Creating a doubly linked list to determine how many shuffles are necessary to bring a List back into its original order to perform the perfect shuffle. 
A perfect shuffle is one in which a deck of cards is split evenly, then merged into a new deck by alternately inserting cards from each half into the new deck.

List.cpp - Contains a Doubly Linked List of Node object implementation with a front and back dummy 
List.h - Contains header files for List.cpp
Shuffle.cpp - Performs the perfect shuffle which is where the deck of cards is split evently and merged into a new deck by adding the cards in an alternating manner
Makefile - Runs and builds the progrma 
ListTest.cpp - Tests List ADT functions 


